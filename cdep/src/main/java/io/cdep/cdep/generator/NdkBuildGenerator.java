/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
package io.cdep.cdep.generator;

import io.cdep.API;
import io.cdep.annotations.NotNull;
import io.cdep.annotations.Nullable;
import io.cdep.cdep.Coordinate;
import io.cdep.cdep.ast.finder.*;
import io.cdep.cdep.utils.CommandLineUtils;
import io.cdep.cdep.utils.ExpressionUtils;
import io.cdep.cdep.utils.FileUtils;
import io.cdep.cdep.utils.StringUtils;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static io.cdep.cdep.io.IO.infoln;
import static io.cdep.cdep.utils.StringUtils.safeFormat;

public class NdkBuildGenerator extends AbstractNdkBuildGenerator {

  private GlobalBuildEnvironmentExpression globals;

  @Nullable
  private
  String currentLib = null;

  @Nullable
  private
  Coordinate coordinate = null;

  @Nullable
  private
  String moduleName = null;

  private int indent = 0;

  public NdkBuildGenerator(@NotNull GeneratorEnvironment environment) {
    super(environment);
  }

  private static String getNdkBuildModuleName(String artifactId) {
    return artifactId.replace("/", "-");
  }

  public String generate(FunctionTableExpression expr) {
    expr = (FunctionTableExpression)
        new JoinedFileToStringRewriter("(", ")").visitFunctionTableExpression(expr);
    visit(expr);
    return sb.toString();
  }

  @Override
  protected void visitFunctionTableExpression(@NotNull FunctionTableExpression expr) {
    globals = expr.globals;
    File moduleFolder = new File(environment.modulesFolder, "ndk-build");
    moduleFolder = new File(moduleFolder, "cdep-dependencies");
    moduleFolder.mkdirs();
    File androidMk = new File(moduleFolder, "Android.mk");
    infoln("Generating %s", androidMk);
    appendIndented("###");
    appendIndented("### ndk-module file generated by CDep");
    appendIndented("### DO NOT EDIT");
    appendIndented("###");
    appendIndented("cdep_exploded_root:=%s", environment.unzippedArchivesFolder);

    List<String> subModules = new ArrayList<>();
    for (Coordinate coordinate : expr.orderOfReferences) {
      this.coordinate = coordinate;
      StatementExpression findFunction = expr.getFindFunction(coordinate);
      Set<String> libs = ExpressionUtils.findReferencedLibraryNames(findFunction);
      this.moduleName = getNdkBuildModuleName(coordinate.artifactId);

      // Handle case of header-only
      if (libs.isEmpty()) {
        appendIndented("###");
        appendIndented("### Add header-only dependency for CDep module: %s", coordinate.toString());
        if (libs.size() > 1) {
          appendIndented("### library: %s", currentLib);
        }
        appendIndented("###");

        appendIndented("LOCAL_PATH:=$(call my-dir)");
        appendIndented("include $(CLEAR_VARS)");
        appendIndented("LOCAL_MODULE:=%s", moduleName);
        appendIndented("%s:=", getStaticLibraryExported());
        visit(findFunction);
        appendIndented("include $(BUILD_STATIC_LIBRARY)");
        continue;
      }

      for (String lib : libs) {
        currentLib = CommandLineUtils.getLibraryNameFromLibraryFilename(new File(lib));
        if (libs.size() > 1) {
          moduleName += "-" + currentLib;
          subModules.add(moduleName);
        }
        appendIndented("###");
        appendIndented("### Add dependency for CDep module: %s", coordinate.toString());
        if (libs.size() > 1) {
          appendIndented("### library: %s", currentLib);
        }
        appendIndented("###");

        appendIndented("LOCAL_PATH:=$(call my-dir)");
        appendIndented("include $(CLEAR_VARS)");
        appendIndented("LOCAL_MODULE:=%s", moduleName);
        appendIndented("%s:=", getStaticLibraryExported());
        visit(findFunction);
        this.currentLib = null;

        appendIndented("ifdef %s", getStaticLibraryExported());
        appendIndented("  include $(PREBUILT_STATIC_LIBRARY)");
        appendIndented("else");
        appendIndented("  include $(BUILD_STATIC_LIBRARY)");
        appendIndented("endif");
      }

      // If there were multiple modules then expose an outer module
      // that collects the submodules into one place.
      if (subModules.size() > 0) {
        appendIndented("###");
        appendIndented("### Add submodule collector dependency for CDep module: %s", coordinate.toString());
        appendIndented("###");
        appendIndented("LOCAL_PATH:=$(call my-dir)");
        appendIndented("include $(CLEAR_VARS)");
        appendIndented("LOCAL_MODULE:=%s", getNdkBuildModuleName(coordinate.artifactId));
        appendIndented("LOCAL_STATIC_LIBRARIES:=${%s}", getAllModulesVariable());
        appendIndented("include $(BUILD_STATIC_LIBRARY)");
        appendIndented("%s:=", getAllModulesVariable());
      }
      subModules = new ArrayList<>();
    }
    // Write the dependency fetch commands
    try {
      FileUtils.writeTextToFile(androidMk, sb.get(0).toString());
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  private String getAllModulesVariable() {
    return String.format("CDEP_%S_ALL_MODULES", getNdkBuildModuleName(this.coordinate.artifactId).toUpperCase());
  }

  private String getStaticLibraryExported() {
    return "CDEP_STATIC_LIBRARY_EXPORTED";
  }

  @Override
  protected void visitAssignmentExpression(@NotNull AssignmentExpression expr) {
    appendIndented("%s:=", expr.name);
    visit(expr.expression);
  }

  @Override
  protected void visitAssignmentReferenceExpression(AssignmentReferenceExpression expr) {
    append("$(%s)", expr.assignment.name);
  }

  @Override
  protected void visitModuleExpression(@NotNull ModuleExpression expr) {
    for (Coordinate dependency : expr.dependencies) {
      appendIndented("LOCAL_STATIC_LIBRARIES+=%s", getNdkBuildModuleName(dependency.artifactId));
    }
    super.visitModuleExpression(expr);
  }

  @Override
  protected void visitModuleArchiveExpression(@NotNull ModuleArchiveExpression expr) {
    boolean haveDownloaded = false;
    String fetchCommand = generateCDepCall(
        "fetch-archive", this.coordinate.toString(),
        expr.file.toString(),
        expr.size.toString(),
        expr.sha256);

    pushStringBuilder();
    visit(expr.completionSentinel);
    String completionSentinel = popStringBuilder();
    if (expr.includePath != null) {
      pushStringBuilder();
      visit(expr.includePath);
      String includePath = popStringBuilder();

      fetchSingleArchive(expr, fetchCommand, completionSentinel);
      haveDownloaded = true;
      appendIndented("LOCAL_EXPORT_C_INCLUDES+=%s", includePath);
    }

    if (expr.libraryPaths.length > 0) {
      for (int i = 0; i < expr.libraryPaths.length; ++i) {
        String lib = CommandLineUtils.getLibraryNameFromLibraryFilename(new File(expr.libs[i]));
        if (!lib.equals(currentLib)) {
          continue;
        }
        pushStringBuilder();
        visit(expr.libraryPaths[i]);
        String libraryPath = popStringBuilder();

        if (!haveDownloaded) {
          fetchSingleArchive(expr, fetchCommand, completionSentinel);
          haveDownloaded = true;
        }
        appendIndented("LOCAL_SRC_FILES:=%s", libraryPath);
        appendIndented("%s+=%s", getAllModulesVariable(), getNdkBuildModuleName(this.moduleName));
        appendIndented("%s:=yes", getStaticLibraryExported());
      }
    }
  }

  private void fetchSingleArchive(@NotNull ModuleArchiveExpression expr, @NotNull String fetchCommand, @NotNull String completionSentinel) {
    String guard = String.format("CDEP_%s_DOWNLOAD_GUARD", expr.sha256).toUpperCase();
    appendIndented("ifneq ($(%s),1)", guard);
    appendIndented("ifeq ($(wildcard %s),)", completionSentinel);
    ++indent;
    appendIndented("$(info CDep downloading %s)", expr.file.toString());
    appendIndented(fetchCommand);
    --indent;
    appendIndented("endif");
    appendIndented("endif");
    appendIndented("%s:=1", guard);
  }


  private String generateCDepCall(String... args) {
    try {
      return String.format("$(shell %s)",
          StringUtils.joinOn(" ", API.generateCDepCall(environment, args)));
    } catch (MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  protected void visitInvokeFunctionExpression(@NotNull InvokeFunctionExpression expr) {
    if (expr.function == ExternalFunctionExpression.FILE_JOIN_SEGMENTS) {
      for (int i = 0; i < expr.parameters.length; ++i) {
        if (i > 0) {
          append("/");
        }
        visit(expr.parameters[i]);
      }
      return;
    }
    if (expr.function == ExternalFunctionExpression.STRING_EQUALS) {
      append("eq (");
      visit(expr.parameters[0]);
      append(",");
      visit(expr.parameters[1]);
      append(")");
      return;
    }

    if (expr.function == ExternalFunctionExpression.INTEGER_GTE) {
      append("neq (,$(call gte,");
      visit(expr.parameters[0]);
      append(",");
      visit(expr.parameters[1]);
      append("))");
      return;
    }
    throw new RuntimeException(expr.toString());
  }

  @Override
  protected void visitParameterExpression(ParameterExpression expr) {
    if (expr == globals.buildSystemTargetPlatform) {
      append("$(APP_PLATFORM_LEVEL)");
      return;
    }
    if (expr == globals.cdepDeterminedAndroidAbi) {
      append("$(TARGET_ARCH_ABI)");
      return;
    }
    if (expr == globals.cdepDeterminedAndroidRuntime) {
      append("$(APP_STL)");
      return;
    }
    if (expr == globals.buildSystemNoneRuntime) {
      append("system");
      return;
    }
    append("$(%s)", expr.name);
  }

  @Override
  protected void visitIfSwitchExpression(@NotNull IfSwitchExpression expr) {
    // Check whether this is a target system if-case. If so, we don't need to check since
    // ndk-build is purely android.
    if (isTargetSystemBranch(expr)) {
      Expression androidSystemBranch = tryFindAndroidSystemBranch(expr);
      if (androidSystemBranch != null) {
        visit(androidSystemBranch);
      }
      return;
    }
    for (int i = 0; i < expr.conditions.length; ++i) {
      if (i > 0) {
        appendIndented("else");
      }
      appendIndented("if");
      visit(expr.conditions[i]);
      ++indent;
      visit(expr.expressions[i]);
      --indent;
    }
    appendIndented("else");
    ++indent;
    visit(expr.elseExpression);
    --indent;
    for (int i = 0; i < expr.conditions.length; ++i) {
      appendIndented("endif");
    }
  }

  @Override
  protected void visitAbortExpression(@NotNull AbortExpression expr) {
    Object args[] = new String[expr.parameters.length];
    for (int i = 0; i < args.length; ++i) {
      pushStringBuilder();
      visit(expr.parameters[i]);
      args[i] = popStringBuilder();
    }
    appendIndented("$(error " + expr.message + ")", args);
  }

  private boolean isTargetSystemBranch(IfSwitchExpression expr) {
    for (int i = 0; i < expr.conditions.length; ++i) {
      Expression condition = expr.conditions[i];
      if (condition instanceof InvokeFunctionExpression) {
        InvokeFunctionExpression invoke = (InvokeFunctionExpression) condition;
        if (invoke.function == ExternalFunctionExpression.STRING_EQUALS) {
          if (invoke.parameters[0] == globals.buildSystemTargetSystem) {
            return true;
          }
        }
      }
    }
    return false;
  }

  private Expression tryFindAndroidSystemBranch(IfSwitchExpression expr) {
    for (int i = 0; i < expr.conditions.length; ++i) {
      Expression condition = expr.conditions[i];
      if (condition instanceof InvokeFunctionExpression) {
        InvokeFunctionExpression invoke = (InvokeFunctionExpression) condition;
        if (invoke.function == ExternalFunctionExpression.STRING_EQUALS) {
          ConstantExpression build = (ConstantExpression) invoke.parameters[1];
          if (build.value.equals("Android")) {
            return expr.expressions[i];
          }
        }
      }
    }
    return null;
  }

  private void appendIndented(String format, Object... args) {
    sb.get(0).append("\r\n");
    sb.get(0).append(new String(new char[indent * 2]).replace('\0', ' '));
    sb.get(0).append(safeFormat(format, args));
  }
}
